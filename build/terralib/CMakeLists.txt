cmake_minimum_required(VERSION 2.8)

project(all)

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../Modules")

find_package(Boost 1.44)
find_package(Log4Cxx)
find_package(Proj4)
find_package(Geos)
find_package(GDAL)
find_package(Postgresql)
find_package(Qt4)
find_package(Qwt)
find_package(Xerces)

IF(WIN32)
	find_package(GNU)
ENDIF(WIN32)

IF(UNIX)
  find_package(Grib)
ENDIF(UNIX)

# Common
IF(Boost_FOUND AND Log4cxx_FOUND)
	IF(WIN32)
		IF(GNU_FOUND)
			OPTION ( BUILD_COMMON "Build Common Module?" ON )
		ELSE(GNU_FOUND)
			OPTION ( BUILD_COMMON "Build Common Module?" OFF )
		ENDIF(GNU_FOUND)
	ELSE(WIN32)
		OPTION ( BUILD_COMMON "Build Common Module?" ON )
	ENDIF(WIN32)
ENDIF(Boost_FOUND AND Log4cxx_FOUND)

#Data Type
IF(BUILD_COMMON)
	OPTION ( BUILD_DATATYPE "Build Data Type Module?" ON )
ELSE(BUILD_COMMON)
	OPTION ( BUILD_DATATYPE "Build Data Type Module?" OFF )
ENDIF(BUILD_COMMON)

#SRS
IF(BUILD_COMMON AND PROJ4_FOUND)
	OPTION ( BUILD_SRS "Build SRS Module?" ON )
ELSE(BUILD_COMMON AND PROJ4_FOUND)
	OPTION ( BUILD_SRS "Build SRS Module?" OFF )
ENDIF(BUILD_COMMON AND PROJ4_FOUND)

#Geometry
IF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_SRS AND GEOS_FOUND)
	OPTION ( BUILD_GEOMETRY "Build Geometry Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_SRS AND GEOS_FOUND)
	OPTION ( BUILD_GEOMETRY "Build Geometry Module?" OF )
ENDIF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_SRS AND GEOS_FOUND)

#Raster
IF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_SRS)
	OPTION ( BUILD_RASTER "Build Raster Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_SRS)
	OPTION ( BUILD_RASTER "Build Raster Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_SRS)

#Raster Processing
IF(BUILD_RASTER)
	OPTION ( BUILD_RP "Build Raster Processing (RP) Module?" ON )
ELSE(BUILD_RASTER)
	OPTION ( BUILD_RP "Build Raster Processing (RP) Module?" OFF )
ENDIF(BUILD_RASTER)

#GML
IF(BUILD_COMMON AND BUILD_GEOMETRY AND BUILD_SRS)
	OPTION ( BUILD_GML "Build GML Module?" ON )
ELSE(BUILD_COMMON AND BUILD_GEOMETRY AND BUILD_SRS)
	OPTION ( BUILD_GML "Build GML Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_GEOMETRY AND BUILD_SRS)

#Data Access
IF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_RASTER AND BUILD_SRS)
	OPTION ( BUILD_DATAACCESS "Build Data Access Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_RASTER AND BUILD_SRS)
	OPTION ( BUILD_DATAACCESS "Build Data Access Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_RASTER AND BUILD_SRS)

#Filter
IF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_DATAACCESS AND BUILD_GEOMETRY AND BUILD_GML AND BUILD_SRS)
	OPTION ( BUILD_FILTER "Build Filter Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_DATAACCESS AND BUILD_GEOMETRY AND BUILD_GML AND BUILD_SRS)
	OPTION ( BUILD_FILTER "Build Filter Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_DATAACCESS AND BUILD_GEOMETRY AND BUILD_GML AND BUILD_SRS)

#XLink
IF(BUILD_COMMON)
	OPTION ( BUILD_XLINK "Build XLink Module?" ON )
ELSE(BUILD_COMMON)
	OPTION ( BUILD_XLINK "Build XLink Module?" OFF )
ENDIF(BUILD_COMMON)

#Color
IF(BUILD_COMMON)
	OPTION ( BUILD_COLOR "Build Color Module?" ON )
ELSE(BUILD_COMMON)
	OPTION ( BUILD_COLOR "Build Color Module?" OFF )
ENDIF(BUILD_COMMON)

#Plugin
IF(BUILD_COMMON)
	OPTION ( BUILD_PLUGIN "Build Plugin Module?" ON )
ELSE(BUILD_COMMON)
	OPTION ( BUILD_PLUGIN "Build Plugin Module?" OFF )
ENDIF(BUILD_COMMON)

#Symbology
IF(BUILD_COMMON AND BUILD_COLOR AND BUILD_FILTER AND BUILD_XLINK)
	OPTION ( BUILD_SYMBOLOGY "Build Symbology Module?" ON )
ELSE(BUILD_COMMON AND BUILD_COLOR AND BUILD_FILTER AND BUILD_XLINK)
	OPTION ( BUILD_SYMBOLOGY "Build Symbology Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_COLOR AND BUILD_FILTER AND BUILD_XLINK)

#Annotation Text
IF(BUILD_COMMON AND BUILD_GEOMETRY AND BUILD_SRS)
	OPTION ( BUILD_ANNOTATIONTEXT "Build Annotation Text Module?" ON )
ELSE(BUILD_COMMON AND BUILD_GEOMETRY AND BUILD_SRS)
	OPTION ( BUILD_ANNOTATIONTEXT "Build Annotation Text Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_GEOMETRY AND BUILD_SRS)

#Memory
IF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_DATAACCESS AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_RASTER)
	OPTION ( BUILD_MEMORY "Build Memory Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_DATAACCESS AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_RASTER)
	OPTION ( BUILD_MEMORY "Build Memory Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_DATAACCESS AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_RASTER)

#ST
IF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_RASTER)
	OPTION ( BUILD_ST "Build ST Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_RASTER)
	OPTION ( BUILD_ST "Build ST Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_RASTER)

#Maptools
IF(BUILD_COMMON AND GDAL_FOUND AND BUILD_COLOR AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_FILTER AND BUILD_GEOMETRY AND BUILD_GML AND BUILD_SYMBOLOGY AND BUILD_XLINK)
	OPTION ( BUILD_MAPTOOLS "Build Maptools Module?" ON )
ELSE(BUILD_COMMON AND GDAL_FOUND AND BUILD_COLOR AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_FILTER AND BUILD_GEOMETRY AND BUILD_GML AND BUILD_SYMBOLOGY AND BUILD_XLINK)
	OPTION ( BUILD_MAPTOOLS "Build Maptools Module?" OFF )
ENDIF(BUILD_COMMON AND GDAL_FOUND AND BUILD_COLOR AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_FILTER AND BUILD_GEOMETRY AND BUILD_GML AND BUILD_SYMBOLOGY AND BUILD_XLINK)

#XML
IF(BUILD_COMMON)
	OPTION ( BUILD_XML "Build XML Module?" ON )
ELSE(BUILD_COMMON)
	OPTION ( BUILD_XML "Build XML Module?" OFF )
ENDIF(BUILD_COMMON)

#OGR
IF(BUILD_COMMON AND GDAL_FOUND AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_MEMORY)
	OPTION ( BUILD_OGR "Build OGR Module?" ON )
ELSE(BUILD_COMMON AND GDAL_FOUND AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_MEMORY)
	OPTION ( BUILD_OGR "Build OGR Module?" OFF )
ENDIF(BUILD_COMMON AND GDAL_FOUND AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_MEMORY)

#Postgis
IF(BUILD_COMMON AND POSTGRESQL_FOUND AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_SRS AND BUILD_MEMORY)
	OPTION ( BUILD_POSTGIS "Build Postgis Module?" ON )
ELSE(BUILD_COMMON AND POSTGRESQL_FOUND AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_SRS AND BUILD_MEMORY)
	OPTION ( BUILD_POSTGIS "Build Postgis Module?" OFF )
ENDIF(BUILD_COMMON AND POSTGRESQL_FOUND AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_PLUGIN AND BUILD_SRS AND BUILD_MEMORY)

#QTWidgets
IF(BUILD_COMMON AND QT4_FOUND AND POSTGRESQL_FOUND AND QWT_FOUND AND BUILD_ANNOTATIONTEXT AND BUILD_COLOR AND BUILD_DATAACCESS 
	AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_MAPTOOLS AND BUILD_RASTER AND BUILD_XLINK)
	OPTION ( BUILD_QTWIDGETS "Build QTWidgets Module?" ON )
ELSE(BUILD_COMMON AND QT4_FOUND AND POSTGRESQL_FOUND AND QWT_FOUND AND BUILD_ANNOTATIONTEXT AND BUILD_COLOR AND BUILD_DATAACCESS 
	AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_MAPTOOLS AND BUILD_RASTER AND BUILD_XLINK)
	OPTION ( BUILD_QTWIDGETS "Build QTWidgets Module?" OF )
ENDIF(BUILD_COMMON AND QT4_FOUND AND POSTGRESQL_FOUND AND QWT_FOUND AND BUILD_ANNOTATIONTEXT AND BUILD_COLOR AND BUILD_DATAACCESS 
	AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_MAPTOOLS AND BUILD_RASTER AND BUILD_XLINK)

#SAM
IF(BUILD_COMMON)
	OPTION ( BUILD_SAM "Build SAM Module?" ON )
ELSE(BUILD_COMMON)
	OPTION ( BUILD_SAM "Build SAM Module?" OFF )
ENDIF(BUILD_COMMON)

#STLoader
IF(BUILD_COMMON AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_ST AND BUILD_XML)
	OPTION ( BUILD_STLOADER "Build STLoader Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_ST AND BUILD_XML)
	OPTION ( BUILD_STLOADER "Build STLoader Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_ST AND BUILD_XML)

#Xerces
IF(BUILD_COMMON AND BUILD_PLUGIN AND XERCESC_FOUND)
	OPTION ( BUILD_XERCES "Build Xerces Module?" ON )
ELSE(BUILD_COMMON AND BUILD_PLUGIN AND XERCESC_FOUND)
	OPTION ( BUILD_XERCES "Build Xerces Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_PLUGIN AND XERCESC_FOUND)

#GDAL
IF(BUILD_COMMON AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_OGR AND BUILD_PLUGIN AND BUILD_RASTER AND BUILD_SRS)
	OPTION ( BUILD_GDAL "Build GDAL Module?" ON )
ELSE(BUILD_COMMON AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_OGR AND BUILD_PLUGIN AND BUILD_RASTER AND BUILD_SRS)
	OPTION ( BUILD_GDAL "Build GDAL Module?" OFF )
ENDIF(BUILD_COMMON AND BUILD_DATAACCESS AND BUILD_DATATYPE AND BUILD_GEOMETRY AND BUILD_OGR AND BUILD_PLUGIN AND BUILD_RASTER AND BUILD_SRS)

#Grib
IF(UNIX)
  IF(BUILD_RASTER)
    IF(GRIB_FOUND)
      OPTION ( BUILD_GRIB "Build GRIB Module?" ON )
    ELSE(GRIB_FOUND)
      OPTION ( BUILD_GRIB "Build GRIB Module?" OFF )
    ENDIF(GRIB_FOUND)
  ENDIF(BUILD_RASTER)
ENDIF(UNIX)

#-----------------------------------------------------------------------

IF(BUILD_ANNOTATIONTEXT)
	add_subdirectory(terralib_annotationtext)
endif(BUILD_ANNOTATIONTEXT)

IF(BUILD_COLOR)
	add_subdirectory(terralib_color)
endif(BUILD_COLOR)

IF(BUILD_COMMON)
	add_subdirectory(terralib_common)
endif(BUILD_COMMON)

IF(BUILD_DATAACCESS)
	add_subdirectory(terralib_dataaccess)
endif(BUILD_DATAACCESS)

IF(BUILD_DATATYPE)
	add_subdirectory(terralib_datatype)
endif(BUILD_DATATYPE)

IF(BUILD_FILTER)
	add_subdirectory(terralib_filter)
endif(BUILD_FILTER)

IF(BUILD_GDAL)
	add_subdirectory(terralib_gdal)
endif(BUILD_GDAL)

IF(BUILD_GEOMETRY)
	add_subdirectory(terralib_geometry)
endif(BUILD_GEOMETRY)

IF(BUILD_GML)
	add_subdirectory(terralib_gml)
endif(BUILD_GML)

IF(BUILD_MAPTOOLS)
	add_subdirectory(terralib_maptools)
endif(BUILD_MAPTOOLS)

IF(BUILD_MEMORY)
	add_subdirectory(terralib_memory)
endif(BUILD_MEMORY)

IF(BUILD_OGR)
	add_subdirectory(terralib_ogr)
endif(BUILD_OGR)

IF(BUILD_PLUGIN)
	add_subdirectory(terralib_plugin)
endif(BUILD_PLUGIN)

IF(BUILD_POSTGIS)
	add_subdirectory(terralib_postgis)
endif(BUILD_POSTGIS)

IF(BUILD_QTWIDGETS)
	add_subdirectory(terralib_qtwidgets)
endif(BUILD_QTWIDGETS)

IF(BUILD_RASTER)
	add_subdirectory(terralib_raster)
endif(BUILD_RASTER)

IF(BUILD_RP)
	add_subdirectory(terralib_rp)
endif(BUILD_RP)

IF(BUILD_SAM)
	add_subdirectory(terralib_sam)
endif(BUILD_SAM)

IF(BUILD_SRS)
	add_subdirectory(terralib_srs)
endif(BUILD_SRS)

IF(BUILD_ST)
	add_subdirectory(terralib_st)
endif(BUILD_ST)

IF(BUILD_STLOADER)
	add_subdirectory(terralib_stloader)
endif(BUILD_STLOADER)

IF(BUILD_SYMBOLOGY)
	add_subdirectory(terralib_symbology)
endif(BUILD_SYMBOLOGY)

IF(BUILD_XERCES)
	add_subdirectory(terralib_xerces)
endif(BUILD_XERCES)

IF(BUILD_XLINK)
	add_subdirectory(terralib_xlink)
endif(BUILD_XLINK)

IF(BUILD_XML)
	add_subdirectory(terralib_xml)
endif(BUILD_XML)

IF(BUILD_GRIB)
  add_subdirectory(terralib_grib)
endif(BUILD_GRIB)
