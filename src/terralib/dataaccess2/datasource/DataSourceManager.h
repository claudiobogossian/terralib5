/*  Copyright (C) 2008-2013 National Institute For Space Research (INPE) - Brazil.

    This file is part of the TerraLib - a Framework for building GIS enabled applications.

    TerraLib is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.

    TerraLib is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with TerraLib. See COPYING. If not, write to
    TerraLib Team at <terralib-team@terralib.org>.
 */

/*!
  \file terralib/dataaccess/datasource/DataSourceManager.h

  \brief This is a singleton for managing all data source instances available in the system.
*/

#ifndef __TERRALIB_DATAACCESS_INTERNAL_DATASOURCEMANAGER_H
#define __TERRALIB_DATAACCESS_INTERNAL_DATASOURCEMANAGER_H

// TerraLib
#include "../../common/Singleton.h"
#include "DataSource.h"

// STL
#include <map>
#include <string>

namespace te
{
  namespace da
  {
    /*!
      \class DataSourceManager

      \brief This is a singleton for managing all data source instances available in the system.

      Prefer using the methods from this singleton instead of using the data source factory
      because it keeps track of the data sources available in the system.
      
      Another reason to use it in your application is that the application can choose any
      strategy to label data sources, for examples, using a
      descriptive title provided by the user or using an unique-universal-identifier (uid) generated by an algorithm. 
      
      \sa DataSource, DataSourceFactory, te::common::Singleton, ConnectionPoolManager

      \warning Developers: take care when adding new methods to this class as it uses synchronization primitives!
    */
    class TEDATAACCESSEXPORT DataSourceManager : public te::common::Singleton<DataSourceManager>
    {
      friend class te::common::Singleton<DataSourceManager>;

      public:

        std::string open(const std::string& dsType, const std::map<std::string, std::string>& dsInfo);

        void open(const std::string& id,
                  const std::string& dsType,
                  const std::map<std::string, std::string>& dsInfo);

        bool isOpened(const std::string& id);

        DataSourcePtr get(const std::string& id);

        void close(const std::string& id);


      protected:

        /*! \brief It initializes the singleton instance of the data source manager. */
        DataSourceManager();

        /*! \brief Singleton destructor. */
        ~DataSourceManager();

      private:

        class Impl;

        Impl* m_pImpl;   //!< The real implementation.
    };

  } // end namespace da
}   // end namespace te


#endif  // __TERRALIB_DATAACCESS_INTERNAL_DATASOURCEMANAGER_H

