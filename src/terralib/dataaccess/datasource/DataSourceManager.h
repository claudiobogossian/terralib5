/*  Copyright (C) 2008-2011 National Institute For Space Research (INPE) - Brazil.

    This file is part of the TerraLib - a Framework for building GIS enabled applications.

    TerraLib is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.

    TerraLib is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with TerraLib. See COPYING. If not, write to
    TerraLib Team at <terralib-team@terralib.org>.
 */

/*!
  \file terralib/dataaccess/datasource/DataSourceManager.h

  \brief This is a singleton for managing all data source instances available in the system.
*/

#ifndef __TERRALIB_DATAACCESS_INTERNAL_DATASOURCEMANAGER_H
#define __TERRALIB_DATAACCESS_INTERNAL_DATASOURCEMANAGER_H

// TerraLib
#include "../../common/Singleton.h"
#include "../../common/ThreadingPolicies.h"
#include "../Config.h"

// STL
#include <list>
#include <map>
#include <string>

namespace te
{
  namespace da
  {
// Forward class
    class DataSource;

    /*!
      \class DataSourceManager

      \brief This is a singleton for managing all data source instances available in the system.

      Prefer using the methods from this singleton instead of using the data source factory
      because it keeps track of the data sources available in the system.
      
      Another reason to use it in your application is that the application can choose any
      strategy to label data sources, for examples, using a
      descriptive title provided by the user or using an unique-universal-identifier (uid) generated by an algorithm. 
      
      \sa DataSource, DataSourceFactory, te::common::Singleton, ConnectionPoolManager

      \warning Developers: take care when adding new methods to this class as it uses synchronization primitives!
    */
    class TEDATAACCESSEXPORT DataSourceManager : public te::common::ObjectLevelLockable<DataSourceManager,
                                                                                        ::boost::recursive_mutex,
                                                                                        ::boost::lock_guard< ::boost::recursive_mutex>,
                                                                                        ::boost::lock_guard< ::boost::recursive_mutex> >,
                                                 public te::common::Singleton<DataSourceManager>
    {
      friend class te::common::Singleton<DataSourceManager>;

      public:

        /*!
          \brief It creates a new data source, store a reference to it in the manager and then return a pointer to it.

          \param id       The identification to be assigned to the data source.
          \param dsType   The data source type name (example: PostGIS, Oracle, WFS).

          \return A pointer to the new data source.

          \exception Exception It throws an exception if a data source with the same identification already exist.

          \note Thread-safe!
        */
        DataSource* make(const std::string& id, const std::string& dsType);

        /*!
          \brief It opens the data source, makes it ready for use, store a reference to it in the manager and return a pointer to it.

          \param id       The identification to be assigned to the data source.
          \param dsType   The data source type name (example: PostGIS, Oracle, WFS).
          \param connInfo The set of parameters used to set up the underlying access channel to the repository.

          \return A pointer to the new opened data source.

          \exception Exception It throws an exception if the data source can not be opened or if a data source with the same identification already exist.

          \note This method doesn't load the data source catalog.

          \note Thread-safe!
        */
        DataSource* open(const std::string& id, const std::string& dsType, const std::map<std::string, std::string>& connInfo);

        /*!
          \brief It opens the data source, makes it ready for use, store a reference to it in the manager and return a pointer to it.

          \param id       The identification to be assigned to the data source.
          \param dsType   The data source type name (example: PostGIS, Oracle, WFS).
          \param connInfo The set of parameters used to set up the underlying access channel to the repository using a string notation with key-value-pairs delimited by '&' (ampersand).

          \return A pointer to the new opened data source.

          \exception Exception It throws an exception if the data source can not be opened or if a data source with the same identification already exist.

          \note This method doesn't load the data source catalog.

          \note Thread-safe!
        */
        DataSource* open(const std::string& id, const std::string& dsType, const std::string& connInfo);

        /*!
          \brief It searches for an opened data source with the given id or it opens a new one if it doesn't exists

          \param id       The data source identification.
          \param dsType   The data source type name (example: PostGIS, Oracle, WFS).
          \param connInfo The set of parameters used to set up the underlying access channel to the repository.

          \return A pointer to the new opened data source.

          \exception Exception It throws an exception if the data source can not be opened.

          \note This method doesn't load the data source catalog.

          \note Thread-safe!
        */
        DataSource* get(const std::string& id, const std::string& dsType, const std::map<std::string, std::string>& connInfo);

        /*!
          \brief It returns the number of data sources that the manager are keeping track of.
 
          \return The number of tracked data sources.

          \note Thread-safe: but take care when relying on this value in a multi-threaded environment!
        */
        std::size_t size() const;

        /*!
          \brief It returns the data source identified by the given id.

          \param id The data source identification.

          \return The data source with the given id, or NULL if none is found.

          \note Thread-safe!
        */
        DataSource* find(const std::string& id) const;

        /*!
          \brief It returns the data source identifier.

          \param ds The data source.

          \return The data source identifier, or an empty string if none is found.

          \note Thread-safe!
        */
        std::string find(DataSource* ds) const;

        /*!
          \brief It stores the data source in the manager.

          The data source must have an identification in order to be inserted.

          \param id The data source identification.
          \param ds The data source to be stored in the manager.

          \note The manager will take the ownership of the data source.

          \exception Exception It throws an exception if a data source with the same identification already exist or if the data source id is empty.

          \note Thread-safe!
        */
        void insert(const std::string& id, DataSource* ds);

        /*!
          \brief It changes the ownership of the data source to the caller.

          The memory used by the given data source will NOT BE released.
          In other words, you will take the ownership of the data source pointer.

          \param ds The data source to be detached.

          \note Thread-safe!
        */
        void detach(DataSource* ds);

        /*!
          \brief It changes the ownership of the data source with the given identifier to the caller.

          The memory used by the given data source will NOT BE released.
          In other words, you will take the ownership of the data source pointer.

          \param id The data source identifier.

          \return The data source identified by id. The caller takes the data source ownership.

          \note Thread-safe!
        */
        DataSource* detach(const std::string& id);

        /*!
          \brief All data sources are detached from the manager.

          The memory used by the data sources will NOT BE released.
          In other words, you will take the ownership of all data source pointers.

          \note Thread-safe!
        */
        void detachAll();

        /*!
          \brief It removes the data source from the manager and clears all the resources used by it.

          The memory used by the given data source will be released.
          In other words, the data source will be destroyed.

          \param ds The data source to be erased.

          \note Thread-safe!
        */
        void remove(DataSource* ds);

        /*!
          \brief It removes the data source with the given identifier and clears all the resources used by it.

          The memory used by the given data source will be released.
          In other words, the data source will be destroyed.

          \param id The data source identifier.

          \note Thread-safe!
        */
        void remove(const std::string& id);

        /*!
          \brief It removes all data sources having type 'dsType' from the manager and clears all the resources used by them.

          The memory used by the given data sources will be released.
          In other words, the data sources will be destroyed.

          \param dsType The type of data sources to be release. Example; "PostGIS".

          \note Thread-safe!
        */
        void removeAll(const std::string& dsType);

        /*!
          \brief It removes all the data sources from the manager and clears all the resources used by them.

          The memory used by the given data sources will be released.
          In other words, the data sources will be destroyed.

          \note Thread-safe!
        */
        void removeAll();

        /*!
          \brief It return the list of opened data sources keept in the manager.

          \return The list of opened data sources keept in the manager.

          \note Thread-safe!
        */
        const std::list<DataSource*>& getOpenedList() const;

      protected:

        /*! \brief It initializes the singleton instance of the data source manager. */
        DataSourceManager();

        /*! \brief Singleton destructor. */
        ~DataSourceManager();

      private:
        
        std::map<std::string, DataSource*> m_dss;       //!< The list of registered data sources.
        std::map<DataSource*, std::string> m_invIndex;  //!< An inverted-index from data sources to id.
        std::list<DataSource*> m_openedDss;             //!< The list 
    };

    inline std::size_t DataSourceManager::size() const
    {
      return m_dss.size();
    }

    inline const std::list<DataSource*>& DataSourceManager::getOpenedList() const
    {
      return m_openedDss;
    }

  } // end namespace da
}   // end namespace te


#endif  // __TERRALIB_DATAACCESS_INTERNAL_DATASOURCEMANAGER_H

