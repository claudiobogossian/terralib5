//TerraLib
#include <terralib/graph/builder/GPMGraphBuilder.h>
#include <terralib/graph/core/AbstractGraph.h>
#include <terralib/graph/functions/SpatialWeightsExchanger.h>
#include <terralib/graph/Globals.h>
#include <terralib/se.h>
#include "GraphExamples.h"
#include "DisplayWindow.h"

// BOOST Includes
#include <boost/shared_ptr.hpp>

// Qt
#include <QtGui/QApplication>

te::se::Style* getGPMGraphStyle();

void CreateGPMAdjacencyGraph(bool draw)
{
  std::cout << std::endl << "Create GPM Graph..." << std::endl;

// graph name
  std::string graphName = "graphGPM";

// open data source
  std::auto_ptr<te::da::DataSource> ds = OpenOGRDataSource(TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados.shp");
  std::string dataSetName = "BR_Estados";
  std::string columnId = "FID";

// graph type
  std::string graphType = te::graph::Globals::sm_factoryGraphTypeUndirectedGraph;

// connection info
  std::map<std::string, std::string> connInfo;

// graph information
  std::map<std::string, std::string> graphInfo;
  graphInfo["GRAPH_DATA_SOURCE_TYPE"] = "MEM";
  graphInfo["GRAPH_NAME"] = graphName;
  graphInfo["GRAPH_DESCRIPTION"] = "Generated by GPM Builder.";

  boost::shared_ptr<te::graph::AbstractGraph> graph;

// create graph
  try
  {
    te::graph::GPMGraphBuilder builder;

    if(builder.setGraphInfo(connInfo, graphType, graphInfo))
    {
      if(!builder.buildAdjacency(ds, dataSetName, columnId, true))
      {
        std::cout << std::endl << "An exception has occuried in Graph Example - CreateGPMGraph: " << builder.getErrorMessage() << std::endl;
      }
      else
      {
        graph = builder.getGraph();
      }
    }
  }
  catch(const std::exception& e)
  {
    std::cout << std::endl << "An exception has occuried in Graph Example - CreateGPMGraph: " << e.what() << std::endl;
  }
  catch(...)
  {
    std::cout << std::endl << "An unexpected exception has occuried in Graph Example - CreateGPMGraph!" << std::endl;
  }

  if(draw)
  {
    // set visual
    te::se::Style* style = getGPMGraphStyle();

    std::auto_ptr<te::da::DataSource> ds = OpenOGRDataSource(TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados.shp");

    std::auto_ptr<te::gm::Envelope> ext = getDataSetExtent(ds.get(), dataSetName);

    //start qApp
    int argc = 0;
    QApplication app(argc, 0);

    DisplayWindow* w = new DisplayWindow();
    w->addGraph(graph.get(), *ext.get(), style);
    w->show();

    app.exec();
  }
}

void CreateGPMDistanceGraph(bool draw)
{
  std::cout << std::endl << "Create GPM Graph..." << std::endl;

// graph name
  std::string graphName = "graphGPM";

// open data source
  std::auto_ptr<te::da::DataSource> ds = OpenOGRDataSource(TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados.shp");
  std::string dataSetName = "BR_Estados";
  std::string columnId = "FID";
  double distance = 5.;

// graph type
  std::string graphType = te::graph::Globals::sm_factoryGraphTypeUndirectedGraph;

// connection info
  std::map<std::string, std::string> connInfo;

// graph information
  std::map<std::string, std::string> graphInfo;
  graphInfo["GRAPH_DATA_SOURCE_TYPE"] = "MEM";
  graphInfo["GRAPH_NAME"] = graphName;
  graphInfo["GRAPH_DESCRIPTION"] = "Generated by GPM Builder.";

  boost::shared_ptr<te::graph::AbstractGraph> graph;

// create graph
  try
  {
    te::graph::GPMGraphBuilder builder;

    if(builder.setGraphInfo(connInfo, graphType, graphInfo))
    {
      if(!builder.buildDistance(ds, dataSetName, columnId, distance))
      {
        std::cout << std::endl << "An exception has occuried in Graph Example - CreateGPMGraph: " << builder.getErrorMessage() << std::endl;
      }
      else
      {
        graph = builder.getGraph();
      }
    }
  }
  catch(const std::exception& e)
  {
    std::cout << std::endl << "An exception has occuried in Graph Example - CreateGPMGraph: " << e.what() << std::endl;
  }
  catch(...)
  {
    std::cout << std::endl << "An unexpected exception has occuried in Graph Example - CreateGPMGraph!" << std::endl;
  }

  //create Spatial Weights Files
  boost::shared_ptr<te::graph::AbstractGraph> graphSW;

  try
  {
    std::auto_ptr<te::da::DataSource> dataSource = OpenOGRDataSource(TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados.shp");

     te::graph::SpatialWeightsExchanger swe;

    std::string galFileName = TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados_distance.gal";
    swe.exportToGAL(graph.get(), galFileName, dataSetName, columnId);

    std::string gwtFileName = TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados_distance.gwt";
    swe.exportToGWT(graph.get(), gwtFileName, 0, dataSetName, columnId);

    std::map<std::string, std::string> dsInfo;

    std::map<std::string, std::string> graphInfo;
    graphInfo["GRAPH_DATA_SOURCE_TYPE"] = "MEM";
    graphInfo["GRAPH_NAME"] = "testesteste";
    graphInfo["GRAPH_DESCRIPTION"] = "Generated by GWT Importer.";

    std::string graphType = te::graph::Globals::sm_graphFactoryDefaultObject;

    te::graph::AbstractGraph* gGWT = swe.importFromGWT(gwtFileName, dsInfo, graphType, graphInfo, dataSource.get());
    delete gGWT;

    te::graph::AbstractGraph* gGAL = swe.importFromGAL(galFileName, dsInfo, graphType, graphInfo, dataSource.get());
    graphSW.reset(gGAL);
  }
  catch(const std::exception& e)
  {
    std::cout << std::endl << "An exception has occuried in Graph Example - CreateGPMGraph: " << e.what() << std::endl;
  }
  catch(...)
  {
    std::cout << std::endl << "An unexpected exception has occuried in Graph Example - CreateGPMGraph!" << std::endl;
  }

  if(draw)
  {
    // set visual
    te::se::Style* style = getGPMGraphStyle();

    std::auto_ptr<te::da::DataSource> ds = OpenOGRDataSource(TE_DATA_EXAMPLE_DIR "/data/graph/BR_Estados.shp");

    std::auto_ptr<te::gm::Envelope> ext = getDataSetExtent(ds.get(), dataSetName);

    //start qApp
    int argc = 0;
    QApplication app(argc, 0);

    DisplayWindow* w = new DisplayWindow();
    w->setPNGPrefix("gal");
    w->addGraph(graphSW.get(), *ext.get(), style);
    w->show();

    app.exec();
  }
}

te::se::Style* getGPMGraphStyle()
{
  te::se::Stroke* stroke = te::se::CreateStroke("#FFFF00", "1.0");
  te::se::LineSymbolizer* lineSymbolizer = te::se::CreateLineSymbolizer(stroke);

  te::se::Fill* markFill = te::se::CreateFill("#009900", "1.0");
  te::se::Stroke* markStroke = te::se::CreateStroke("#000000", "1");
  te::se::Mark* mark = te::se::CreateMark("circle", markStroke, markFill);
  te::se::Graphic* graphic = te::se::CreateGraphic(mark, "4", "", "");
  te::se::PointSymbolizer* pointSymbolizer = te::se::CreatePointSymbolizer(graphic);
  
  te::se::Rule* rule = new te::se::Rule;
  rule->push_back(lineSymbolizer);
  rule->push_back(pointSymbolizer);

  te::se::FeatureTypeStyle* style = new te::se::FeatureTypeStyle;
  style->push_back(rule);

  return style;
}
