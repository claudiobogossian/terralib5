Examinando os recursos de manipulação de ícones do Qt, verificamos que existem, pelo menos, 2 formas de usá-los:
1 - inserindo os ícones como parte do binário;
2 - usando um tema de ícones.

A primeira abordagem é a que estamos mais acostumados a fazer. Escreve-se um arquivo de recursos do qt apontando todas as imagens. Em tempo de compilação, esse arquivo é parseado e um arquivo fonte (.cpp) é gerado e compilado junto ao binário a ser gerado.
Na segunda abordagem, os ícones NÃO fazem parte do binário. É preciso que eles estejam disponíveis em pastas visíveis à aplicação e definidas como pasta de pesquisa para recurso de temas pelo executavel. Esses ícones são carregados quando o sistema é executado dependendo do tema a ser usado. Minha opinião pessoal é que a segunda alternativa parece ser mais flexível e melhor customizável. As duas alternativas são, mas a segunda me parece menos trabalhosa.

Na primeira alternativa, para que possamos alterar os icones do aplicativo, seria necessário que mudássemos todos os icones do recurso(.qrc), que poderia ser o mesmo arquivo, mas, neste caso, deveria apontar ícones novos. A meu ver, seria necessário mudar uma linha no CMakeLists.txt, para setar esse novo arquivo de recurso. Além disso, é preciso ter em mente que para não precisar alterar cada arquivo no código que contenha referências a ícones do recurso, precisamos que esse arquivo de recurso contenha o mesmo prefixo, do usado por default, e aponte imagens que tenham os mesmos nomes das imagens default. Ou seja, o identificador das imagens deve ser, precisamente, o mesmo. E já que foi preciso alterar o CMakeLists.txt é necessário regerar o Makefile e compilar novamente o binário. Note que, se for necessário mudar todos os ícones da aplicação, existem ícones usados nos componentes Qt da TerraLib e, portanto, o módulo terralib_qtwidgets deverá ser recompilado também.

Usando temas de ícones, a mudança no código é mais simples: precisamos dizer qual o tema a ser usado no executável. Isso pode ser feito de maneiras diferentes inclusive não requerendo recompilação, bastando apenas que o executável fosse chamado passando o nome do tema como parâmetro na chamada. Existem funcionalidades que talvez possam ser exploradas, como a disposição de temas de ícones default para diferentes ambientes: windows, linux, mac... Claro que como na 1 alternativa, existem algumas regras a serem seguidas:
1-Definir o arquivo de tema. Nele são listadas as pastas (subpastas necessariamente) que contém os ícones e informações como o tamanho dos icones naquela pasta, se eles são escaláveis, ...
2-Arranjar de forma concisa os icones e padronizar os nomes. Existem documentos que descrevem como arranjar os ícones e padrões de nomes. O "Tango" possui tema de ícones que pode servir como exemplo e é mais conhecido.

O arquivo de tema é simples de ser feito. A questão é a organização dos ícones. O mecanismo de pesquisa pelo ícone tem uma lógica que está descrita em pseudo código na documentação. Pelo que entendi, a engine de pesquisa, quando solicitado um ícone "X", pesquisará primeiro os tipos escaláveis(.svg), se não encontrar, pesquisa pelo nome nas pastas descritas com preferência para o tamanho requerido. Isso significa que se procurar um ícone de tamanho 16x16 chamado "view" e encontrá-lo na pasta de 32x32, esse ícone será usado e NÃO SERÁ ESCALADO. 

Neste ponto, precisamos tomar uma decisão: como resolver o problema da escala certa dos ícones.