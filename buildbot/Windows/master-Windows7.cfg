
# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("terralib-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, There is one scheduler that forces a build, one that starts a new build at a specif time, and one that starts a build of the examples and unittests when terralib has been successfully built

from buildbot.changes import filter
from buildbot.schedulers import basic, timed, triggerable
from buildbot.schedulers.forcesched import ForceScheduler

terralib5_force_scheduler=ForceScheduler(
                            name="Terralib-Force-Scheduler",
                            builderNames=["Terralib-Windows7-32"])

terralib5_nightly_scheduler=timed.Nightly(name="Terralib-Timed-Scheduler",
                    branch='master',
                    builderNames=['Terralib-Windows7-32'],
                    hour=14,
                    minute=00)

projects_scheduler = triggerable.Triggerable(name="projects_scheduler",
                        builderNames=[ "Unittest-Windows7-32", "Examples-Windows7-32"])

c['schedulers'] = [terralib5_force_scheduler, terralib5_nightly_scheduler, projects_scheduler]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig
from buildbot.steps import trigger

#Creating factories for each of the projects to be built
terralib5_Factory = BuildFactory()
Unittest_Factory = BuildFactory()
Examples_Factory = BuildFactory()

# check out the source
terralib5_Factory.addStep(Git(repourl='https://git.dpi.inpe.br/terralib5', mode='copy', logEnviron=False))

# Calls CMake to generate the project
terralib5_Factory.addStep(ShellCommand(command=["cmake", "-G", 'Visual Studio 10', "build/terralib", "-DCMAKE_BUILD_TYPE=Debug", "-DTE_DEPENDENCIES_DIR=C:/Users/andre.oliveira/Funcate/Projetos/Dependencias/Win32", "-DCPACK_BINARY_ZIP=True"],
     description=["Running cmake"],
     descriptionDone=["cmake"],
     logEnviron=False,
     haltOnFailure=True))
	 
#Starts a compilation process
terralib5_Factory.addStep(ShellCommand(command=["msbuild", "terralib.sln", "/p:Configuration=Debug;Platform=Win32"],
     description=["Building"],
     descriptionDone=["Build"],
     logEnviron=False,
     haltOnFailure=True))

#Creates a package
terralib5_Factory.addStep(ShellCommand(command=["msbuild", "PACKAGE.vcxproj"],
     description=["Generating the packages"],
     descriptionDone=["Package"],
     logEnviron=False,
     haltOnFailure=True))

#Tests the package
terralib5_Factory.addStep(ShellCommand(command=["7z.exe", "x", "-y", "terralib-5.0.0-msvc10-i386.zip"],
     description=["Extracting a package"],
     descriptionDone=["Extract"],
     logEnviron=False,
     haltOnFailure=True))

#Triggers the examples and Unit tests compilations
terralib5_Factory.addStep(trigger.Trigger(schedulerNames=['projects_scheduler'],
                                          waitForFinish=False))

# Calls CMake to generate the project
Unittest_Factory.addStep(ShellCommand(command=["cmake", "-G", 'Visual Studio 10', "../../Terralib-Windows7-32/source/build/unittest", "-Dterralib_DIR=C:/Buildbot/terralib-slave/Terralib-Windows7-32/build/terralib-5.0.0-msvc10-i386/Modules/", "-DCMAKE_BUILD_TYPE=Debug", "-DTE_DEPENDENCIES_DIR=C:/Users/andre.oliveira/Funcate/Projetos/Dependencias/Win32"],
     description=["Running cmake"],
     descriptionDone=["cmake"],
     logEnviron=False,
     haltOnFailure=True))

#Starts a compilation process
Unittest_Factory.addStep(ShellCommand(command=["msbuild", "unittests.sln", "/p:Configuration=Debug;Platform=Win32"],
     description=["Building"],
     descriptionDone=["Build"],
     logEnviron=False,
     haltOnFailure=True))

# Calls CMake to generate the project
Examples_Factory.addStep(ShellCommand(command=["cmake", "-G", 'Visual Studio 10', "../../Terralib-Windows7-32/source/build/examples", "-Dterralib_DIR=C:/Buildbot/terralib-slave/Terralib-Windows7-32/build/terralib-5.0.0-msvc10-i386/Modules/", "-DCMAKE_BUILD_TYPE=Debug", "-DTE_DEPENDENCIES_DIR=C:/Users/andre.oliveira/Funcate/Projetos/Dependencias/Win32"],
     description=["Running cmake"],
     descriptionDone=["cmake"],
     logEnviron=False,
     haltOnFailure=True))

#Starts a compilation process
Examples_Factory.addStep(ShellCommand(command=["msbuild", "examples.sln", "/p:Configuration=Debug;Platform=Win32"],
     description=["Building"],
     descriptionDone=["Build"],
     logEnviron=False,
     haltOnFailure=True))

#Running the Unit tests
Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_common_d.exe"],
     description=["Running terralib_common Unit tests"],
     descriptionDone=["terralib_common Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_dataaccess_d.exe"],
     description=["Running terralib_dataaccess Unit tests"],
     descriptionDone=["terralib_dataaccess Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_datatype_d.exe"],
     description=["Running terralib_datatype Unit tests"],
     descriptionDone=["terralib_datatype Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_geometry_d.exe"],
     description=["Running terralib_geometry Unit tests"],
     descriptionDone=["terralib_geometry Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_memory_d.exe"],
     description=["Running terralib_mwmory Unit tests"],
     descriptionDone=["terralib_memory Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_qtwidgets_d.exe"],
     description=["Running terralib_qtwidgets Unit tests"],
     descriptionDone=["terralib_qtwidgets Unit tests"],
     logEnviron=False))
	 
Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_rp_classifier_d.exe"],
     description=["Running terralib_classifier Unit tests"],
     descriptionDone=["terralib_classifier Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_rp_contrast_d.exe"],
     description=["Running terralib_contrast Unit tests"],
     descriptionDone=["terralib_contrast Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_rp_matrix_d.exe"],
     description=["Running terralib_matrix Unit tests"],
     descriptionDone=["terralib_matrix Unit tests"],
     logEnviron=False))
	 
Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_rp_mixturemodel_d.exe"],
     description=["Running terralib_mixturemodel Unit tests"],
     descriptionDone=["terralib_mixturemodel Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_rp_segmenter_d.exe"],
	 description=["Running terralib_segmenter Unit tests"],
     descriptionDone=["terralib_segmenter Unit tests"],
     logEnviron=False))

Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_rp_tiepointslocator_d.exe"],
     description=["Running terralib_tiepointslocator Unit tests"],
     descriptionDone=["terralib_tiepointslocator Unit tests"],
     logEnviron=False))
	 
Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_sam_d.exe"],
     description=["Running terralib_sam Unit tests"],
     descriptionDone=["terralib_sam Unit tests"],
     logEnviron=False))
	 
Unittest_Factory.addStep(ShellCommand(command=["C:/Buildbot/terralib-slave/Unittest-Windows7-32/build/bin32/terralib_unittest_srs_d.exe"],
     description=["Running terralib_srs Unit tests"],
     descriptionDone=["terralib_srs Unit tests"],
     logEnviron=False)) 
	 
c['builders'] = []

c['builders'].append(
    BuilderConfig(name="Terralib-Windows7-32",
      slavenames=["terralib-slave"],
      factory=terralib5_Factory))

c['builders'].append(
    BuilderConfig(name="Unittest-Windows7-32",
      slavenames=["terralib-slave"],
      factory=Unittest_Factory))

c['builders'].append(
    BuilderConfig(name="Examples-Windows7-32",
      slavenames=["terralib-slave"],
      factory=Examples_Factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("Terralib5","Terralib5")]),
    cleanShutdown='auth',
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth'
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### Mail Notifier

from buildbot.status.builder import Results

import cgi, datetime

def html_message_formatter(mode, name, build, results, master_status):
    """Provide a customized message to Buildbot's MailNotifier.

    The last 80 lines of the log are provided as well as the changes
    relevant to the build.  Message content is formatted as html.
    """
    result = Results[results]

    limit_lines = 80
    text = list()
    text.append(u'<h4>Build status: %s</h4>' % result.upper())
    text.append(u'<table cellspacing="10"><tr>')
    text.append(u"<td>Buildslave for this Build:</td><td><b>%s</b></td></tr>" % build.getSlavename())
    if master_status.getURLForThing(build):
        text.append(u'<tr><td>Complete logs for all build steps:</td><td><a href="%s">%s</a></td></tr>'
                    % (master_status.getURLForThing(build),
                       master_status.getURLForThing(build))
                    )
        text.append(u'<tr><td>Build Reason:</td><td>%s</td></tr>' % build.getReason())
        source = u""
        ss = build.getSourceStamps().pop()
        if ss.branch:
            source += u"[branch %s] " % ss.branch
        if ss.revision:
            source +=  ss.revision
        else:
            source += u"HEAD"
        if ss.patch:
            source += u" (plus patch)"
        if ss.patch_info: # add patch comment
            source += u" (%s)" % ss.patch_info[1]
        text.append(u"<tr><td>Build Source Stamp:</td><td><b>%s</b></td></tr>" % source)
        text.append(u"<tr><td>Blamelist:</td><td>%s</td></tr>" % ",".join(build.getResponsibleUsers()))
        text.append(u'</table>')
        if ss.changes:
            text.append(u'<h4>Recent Changes:</h4>')
            for c in ss.changes:
                cd = c.asDict()
                when = datetime.datetime.fromtimestamp(cd['when'] ).ctime()
                text.append(u'<table cellspacing="10">')
                text.append(u'<tr><td>Repository:</td><td>%s</td></tr>' % cd['repository'] )
                text.append(u'<tr><td>Project:</td><td>%s</td></tr>' % cd['project'] )
                text.append(u'<tr><td>Time:</td><td>%s</td></tr>' % when)
                text.append(u'<tr><td>Changed by:</td><td>%s</td></tr>' % cd['who'] )
                text.append(u'<tr><td>Comments:</td><td>%s</td></tr>' % cd['comments'] )
                text.append(u'</table>')
                files = cd['files']
                if files:
                    text.append(u'<table cellspacing="10"><tr><th align="left">Files</th></tr>')
                    for file in files:
                        text.append(u'<tr><td>%s:</td></tr>' % file['name'] )
                    text.append(u'</table>')
        text.append(u'<br>')
        # get log for last step
        logs = build.getLogs()
        # logs within a step are in reverse order. Search back until we find stdio
        for log in reversed(logs):
            if log.getName() == 'stdio':
                break
        name = "%s.%s" % (log.getStep().getName(), log.getName())
        status, dummy = log.getStep().getResults()
        content = log.getText().splitlines() # Note: can be VERY LARGE
        url = u'%s/steps/%s/logs/%s' % (master_status.getURLForThing(build),
                                       log.getStep().getName(),
                                       log.getName())

        text.append(u'<i>Detailed log of last build step:</i> <a href="%s">%s</a>'
                    % (url, url))
        text.append(u'<br>')
        text.append(u'<h4>Last %d lines of "%s"</h4>' % (limit_lines, name))
        unilist = list()
        for line in content[len(content)-limit_lines:]:
            unilist.append(cgi.escape(unicode(line,'utf-8')))
        text.append(u'<pre>'.join([uniline for uniline in unilist]))
        text.append(u'</pre>')
        text.append(u'<br><br>')
        text.append(u'<b>-The Buildbot</b>')
        return {
            'body': u"\n".join(text),
            'type': 'html'
            }

###Sends an e-mail when the build is completed
from buildbot.status.mail import MailNotifier

mn = MailNotifier(fromaddr="terralib5.buildbot@gmail.com",
		  mode=("problem","failing"),
		  sendToInterestedUsers=False,
		  extraRecipients=["andre.oliveira@funcate.org.br"],
		  #extraRecipients=["terralib-commits@dpi.inpe.br"],
		  relayhost="smtp.gmail.com", smtpPort=587,
		  smtpUser="terralib5.buildbot@gmail.com", smtpPassword="Terralib5abc123",
		  messageFormatter=html_message_formatter)

c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Terralib 5"
c['titleURL'] = "http://www.dpi.inpe.br/terralib5/wiki/doku.php"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

