/*
  Copyright (C) 2008 National Institute For Space Research (INPE) - Brazil.

  This file is part of the TerraLib - a Framework for building GIS enabled
  applications.

  TerraLib is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License,
  or (at your option) any later version.

  TerraLib is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with TerraLib. See COPYING. If not, write to
  TerraLib Team at <terralib-team@terralib.org>.
 */

/*!
  \file terralib/core/filesystem/FileSystem.h

  \brief A class for handling system files and paths.

  \author Matheus Cavassan Zaglia
*/

#ifndef __TERRALIB_CORE_FILESYSTEM_FILESYSTEM_H__
#define __TERRALIB_CORE_FILESYSTEM_FILESYSTEM_H__

// TerraLib
#include "../Config.h"

// STL
#include <string>
#include <vector>

namespace te
{
  namespace core
  {
    /*!
      \class FileSystem

      \brief A class for handling system files and paths using UTF-8 strings.
     */
    class TECOREEXPORT FileSystem
    {
      public:

        /*!
          \brief Retrives the current working directory path in UTF-8.

          \return String in UTF-8 for the current working directory path.
         */
        static std::string currentPath();

        /*!
          \brief Composes an absolute path for the given path in UTF-8.

          \param path Path in UTF-8.

          \return String in UTF-8 for the composed path.
         */
        static std::string systemCompletePath(const std::string& path);

        /*!
          \brief Retrives the temp directory in UTF-8.

          \return String in UTF-8 for temp directory.
         */
        static std::string tempDirectoryPath();

        /*!
          \brief Retrives an unique path generated by a given format.

          \param format The format used to create a unique path.
          e.g.: "%%%%-%%%%-%%%%-%%%%"

          \return String in UTF-8 for the generated unique path.
         */
        static std::string uniquePath(
            const std::string& format = "%%%%-%%%%-%%%%-%%%%");

        /*!
          \brief Retrives the absolute path for the given path in UTF-8.

          \param path Path in UTF-8.

          \return String in UTF-8 for the absolute path.
         */
        static std::string absolutePath(const std::string& path);

        /*!
          \brief Retrives the extension of a given file path in UTF-8.

          \param path File path in UTF-8.

          \return String in UTF-8 for the extension.
         */
        static std::string extension(const std::string& path);

        /*!
          \brief Checks if a given path in UTF-8 is a directory.

          \param path Path in UTF-8.

          \return true if is a directory, otherwise false.
         */
        static bool isDirectory(const std::string& path);

        /*!
          \brief Checks if a given path in UTF-8 is an empty directory.

          \param path Path in UTF-8.

          \return true if is a empty directory, otherwise false.
         */
        static bool isEmpty(const std::string& path);
        /*!
          \brief Checks if a given path in UTF-8 is a regular file.

          \param path File path in UTF-8.

          \return true if is a regular file, otherwise false.
         */
        static bool isRegularFile(const std::string& path);
        /*!
          \brief Checks if a given path in UTF-8 exists.

          \param path Path in UTF-8.

          \return true if exists, otherwise false.
         */
        static bool exists(const std::string& path);

        /*!
          \brief Creates a directory from a given path in UTF-8

          \param path Path in UTF-8.

          \return true if a new directory was created, otherwise false.
         */
        static bool createDirectory(const std::string& path);
        /*!
          \brief Copies a file

          \param from Path in UTF-8 for the file to be copied.
          \param to Path in UTF-8 for the copy output.

         */
        static void copyFile(const std::string& from, const std::string& to);

        /*!
          \brief Removes a file or directory from a given path in UTF-8.

          \note This function will not remove if the directory is not empty.

          \param path Path in UTF-8.

          \return false if path did not exist in the first place, otherwise
          true.
         */
        static bool remove(const std::string& path);

        /*!
          \brief Renames a file or directory from a given path in UTF-8.

          \param old_p Old name in UTF-8.
          \param new_p New name in UTF-8.
         */
        static void rename(const std::string& old_p, const std::string& new_p);

        /*!
          \brief Lists a directory from a given path in UTF-8.

          \param path Path in UTF-8.

          \return Vector of strings in UTF-8 for directory content.
         */
        static std::vector<std::string> listDirectory(const std::string& path);

      private:
// Not instantiable
        FileSystem();
        ~FileSystem();
// No copy allowed
        FileSystem(FileSystem const&);
        FileSystem& operator=(FileSystem const&);
    };
  }  // end namespace core
}  // end namespace te

#endif  //__TERRALIB_CORE_FILESYSTEM_FILESYSTEM_H__
