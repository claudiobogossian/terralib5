/*  Copyright (C) 2008 National Institute For Space Research (INPE) - Brazil.
  
    This file is part of the TerraLib - a Framework for building GIS enabled applications.
    
    TerraLib is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.
    
    TerraLib is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with TerraLib. See COPYING. If not, write to
    TerraLib Team at <terralib-team@terralib.org>.
 */


#ifndef TE_QT_WIDGETS_RASTERSLICINGWIZARDPAGE_H
#define TE_QT_WIDGETS_RASTERSLICINGWIZARDPAGE_H

//Terralib
#include "../../../dataaccess/datasource/DataSourceInfo.h"
#include "../../../maptools/AbstractLayer.h"
#include "../Config.h"

//Qt
#include <QWizardPage>

//STL
#include <memory>

//Forward declarations
namespace Ui
{
  class RasterSlicingWizardPageForm;
}

namespace te 
{
  namespace se
  {
    class ColorMap;
  }

  namespace qt 
  {
    namespace widgets 
    {
      class ChartStyle;
      class ChartDisplay;
      class ColorMapWidget;
      class Histogram;
      class HistogramChart;

      class TEQTWIDGETSEXPORT RasterSlicingWizardPage : public QWizardPage
      {
          Q_OBJECT

        public:
          
          /*! \brief Constructor. */
          RasterSlicingWizardPage(QWidget* parent=0);

          /*! \brief Destructor. */
          ~RasterSlicingWizardPage();

          /*!
          \brief This function returns the Color Map generated by the user.

          \return A color map representing the legend created by the user.

          /note The caller will take ownership of the returned pointer
          */
          te::se::ColorMap* getColorMap();

          /*!
          \brief This function returns the band from the raster taht will be used.

          \return A string that represents the band that will be used to slice the raster.
          */
          std::string getCurrentBand();

          /*!
          \brief This function returns the envelope that can be used to trim the raster if the user requests it.

          \return A reference to the Envelope that can be used to trim the raster if the user requests it.
          */
          const te::gm::Envelope& getExtent();

          /*!
          \brief This function returns the srid of the display when the wizard was initiated.

          \return The srid of the display when the wizard was initiated.
          */
          int getSRID();

          /*!
          \brief This function will check if the conditions required to trim the raster have been met. 

          In order for this function to return true: 

            The user must select the option to use the visible area;
            The extent must be valid;
            The extent must be within the raster;

          \return A boolean that indicates if the raster can be trimmed.
          */
          bool trimRaster();

          /*!
          \brief This function sets the raster that will be sliced.

          \param raster The raster that will be sliced.
          */
          void setRaster(te::rst::Raster* raster);

          /*!
          \brief This function sets the envelope that will be used to trim tha raster if the user requests it.

          \param extent A reference to the envelope that can be used to trim tha raster.
          */
          void setExtent(const te::gm::Envelope& extent);

          /*!
          \brief This function sets the srid of the display when the wizard was initiated.

          \param srid The current srid of the display.
          */
          void setSRID(int srid = 0);
          
          /*!
          \brief This function returns the parameters as configured by the user.

          \param inputRasterBand The band from the raster selected by the user.
          \param createPaletteRaster A boolean that holds wether a pallete raster will be created or not.
          \param  slicesNumber The number of slices that will be used to generate the histogram.
          \param  eqHistogram A boolean that holds weather the histogram will be equalized or not.
          */
          void getParameters( unsigned int& inputRasterBand, bool& createPaletteRaster,
            unsigned int& slicesNumber, bool& eqHistogram );

          /*!
          \brief This function evaluates the page to confirm if the user has completed the minimum configuration required to slice the raster.

          In order for this function to return true:

            The color map taht will be used on the output layer can not be empty.

          \param A boolean that indicates if the page is complete.
          */
          bool isComplete() const;
          
        protected :

          std::auto_ptr<Ui::RasterSlicingWizardPageForm>  m_ui;              //!< The wizard page form
          te::qt::widgets::ChartStyle*                    m_chartStyle;      //!< The style of the preview histogram
          te::qt::widgets::ChartDisplay*                  m_chartDisplay;    //!< The display used to draw the preview histogram
          te::qt::widgets::ColorMapWidget*                m_colorMapWidget;  //!< The widget used to edit the legend of the output layer
          te::qt::widgets::Histogram*                     m_histogram;       //!< The preview histogram
          te::qt::widgets::HistogramChart*                m_histogramChart;  //!< The preview histogram chart
          std::auto_ptr<te::rst::Raster>                  m_raster;          //!< The raster that will be sliced

        protected slots:

          void onApplyPushButtonClicked();
          void onHistBandComboBoxIndexCHanged(int index);
          void onSliceBandComboBoxIndexCHanged(int index);

      private:

        //No copy allowed
        RasterSlicingWizardPage(const RasterSlicingWizardPage& rhs);
        RasterSlicingWizardPage& operator=(const RasterSlicingWizardPage& rhs);

        te::gm::Envelope m_extent;  //!< The envelope that can be used to trim the output raster
        int m_srid;                 //!<  The current srid from the display
      };
    } // namespace widgets
  } // namespace qt
} // namespace te

#endif // TE_QT_WIDGETS_RASTERSLICINGWIZARDPAGE_H
